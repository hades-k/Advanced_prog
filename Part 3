# PART 3 of project

from models import parser, MitochondrialDNA, SequenceAlignment
import matplotlib.pyplot as plt
import numpy as np


# Loading sequences

data = parser('synthetic_mtDNA_dataset.fasta', 'fasta')
genomes = []

for i in range(len(data)):
    genomes.append(MitochondrialDNA(
        seq=data.loc[i]['seq'],
        ID=data.loc[i]['id'],
        description=data.loc[i]['description']
    ))

# 3.1 
# 2 species to compare
g1 = genomes[0]
g2 = genomes[1]

# Aligning  using models.py
aligner = SequenceAlignment(g1.seq, g2.seq)
aligned_seq1, comparison_line, aligned_seq2 = aligner.align_sequences()


# difference visualization bar
def visualize_differences_bar(seq1, seq2, label1, label2):
    matches = mismatches = gaps = 0
    block_size = 60
    length = len(seq1)
    print(f"\nComparison between {label1} and {label2}:\n")

    for i in range(0, length, block_size):
        block1 = seq1[i:i+block_size]
        block2 = seq2[i:i+block_size]
        comp_line = ""
        
        for a, b in zip(block1, block2):
            if a == b and a!= "-":
                comp_line += "*"
                matches += 1
            elif a == '-' or b == '-':
                comp_line += " "
                gaps += 1
            else:
                comp_line += "|"
                mismatches += 1
            
        label_width = max(len(label1), len(label2))

        print(f"{label1.ljust(label_width)}: {block1}")
        print(f"{' '.ljust(label_width)}  {comp_line}")
        print(f"{label2.ljust(label_width)}: {block2}\n")

    print("Summary:")
    print(f"  Matches   : {matches}")
    print(f"  Mismatches: {mismatches}")
    print(f"  Gaps      : {gaps}")
    print(f"  Total     : {length} positions")

visualize_differences_bar(aligned_seq1, aligned_seq2, g1.ID, g2.ID)


# 3.2
# Defining candidate motifs to check
motifs = ["GATC", "TATA", "ATCG", "CGCG", "TTAA", "CTAG"]

# Local alignment to find motif conservation
threshold_score = 4   # Min score to consider motif conserved

conservation_matrix = []  # rows = motifs, columns = genomes
 
for motif in motifs:
    row = []
    for genome in genomes:
        aligner = SequenceAlignment(motif, genome.seq)
        score = aligner.get_alignment_scores(algo="local")
        row.append(1 if score >= threshold_score else 0)
    conservation_matrix.append(row)

conservation_matrix = np.array(conservation_matrix)
 
 
# Printing pattern summary
for i, motif in enumerate(motifs):
    present_in = [genomes[j].ID for j in range(len(genomes)) if conservation_matrix[i][j] == 1]
    print(f"Motif '{motif}' conserved in {len(present_in)} genome(s): {present_in}")

 
# Ploting motifs conserved, by heatmap

fig, ax = plt.subplots(figsize=(14, 5)) # figure width 
cax = ax.imshow(conservation_matrix, cmap="Greens", aspect='auto')
 
# Labels
ax.set_xticks(np.arange(len(genomes)))
ax.set_yticks(np.arange(len(motifs)))
ax.set_xticklabels([g.ID for g in genomes], rotation=90, ha='right', fontsize=6)
ax.set_yticklabels(motifs)

plt.title("Conserved Motifs Across Species")
plt.xlabel("Genomes")
plt.ylabel("Motifs")
plt.colorbar(cax, label='1 = conserved')
plt.tight_layout()
plt.show()

# 3.3
# reference genome (first one)
reference = genomes[0]
reference_id = reference.ID
print(f"\nReference genome: {reference_id}\n{'-'*50}")

# Comparison all to reference
results = []
for target in genomes[1:]:
    aligner = SequenceAlignment(reference.seq, target.seq)
    aligned_seq1, comp, aligned_seq2 = aligner.align_sequences()
    score = aligner.get_alignment_scores()
    # Computing similarity
    matches = comp.count("*")
    total = len(comp)
    similarity = (matches / total) * 100 if total > 0 else 0
    results.append({
        "id": target.ID,
        "score": score,
        "similarity": similarity
    })
    print(f"{target.ID} | Score: {score} | Similarity: {similarity:.2f}%")

#  similarity as bar chart
plt.figure(figsize=(12, 5))
ids = [r["id"] for r in results]
similarities = [r["similarity"] for r in results]


bars = plt.bar(ids, similarities, color="teal")
plt.axhline(y=100, color='gray', linestyle='--', linewidth=0.5)
plt.title(f"Similarity to Reference Genome {reference_id}")
plt.ylabel("Similarity (%)")
plt.xlabel("Genome ID")
plt.xticks(rotation=90, ha='right', fontsize=6)
plt.tight_layout()
plt.show()
